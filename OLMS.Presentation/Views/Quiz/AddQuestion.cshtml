@{
    ViewData["Title"] = "Add Question";
}

<div class="quiz-creator-container">
    <h2>Create New Quiz</h2>

    <form id="quizForm" class="quiz-form">
        <div class="form-section">
            <div class="form-group">
                <label for="quiz-title">Quiz Title</label>
                <input type="text" id="quiz-title" class="form-control" placeholder="Enter quiz title" required>
            </div>

            <div class="form-group">
                <label for="quiz-description">Description</label>
                <textarea id="quiz-description" class="form-control" placeholder="Enter quiz description"></textarea>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="quiz-startTime">Start Time</label>
                    <input type="datetime-local" id="quiz-startTime" class="form-control">
                </div>

                <div class="form-group">
                    <label for="quiz-endTime">End Time</label>
                    <input type="datetime-local" id="quiz-endTime" class="form-control">
                </div>

                <div class="form-group checkbox-group">
                    <input type="checkbox" id="quiz-isTimeLimited">
                    <label for="quiz-isTimeLimited">Time Limited</label>
                </div>
            </div>
        </div>

        <div class="questions-section">
            <div class="section-header">
                <h3>Questions</h3>
                <button type="button" class="btn btn-primary" onclick="addQuestion()">
                    <i class="fa fa-plus"></i> Add Question
                </button>
            </div>

            <div id="questions-container" class="questions-list"></div>
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-success">Save Quiz</button>
            <button type="button" class="btn btn-secondary">Cancel</button>
        </div>
    </form>
</div>

<script>
    let questions = [];

    function addQuestion() {
        const questionId = questions.length;
        questions.push({
            type: "MultipleChoice",
            content: "",
            options: ["", ""],
            correctOptionIndex: -1
        });
        renderQuestions();
    }

    function updateQuestionType(index, type) {
        questions[index].type = type;

        if (type === "MultipleChoice") {
            questions[index].options = ["", ""];
        } else if (type === "TrueFalse") {
            questions[index].options = ["True", "False"];
            questions[index].correctOptionIndex = -1;
        } else {
            questions[index].options = [];
            questions[index].correctOptionIndex = -1;
        }

        renderQuestions();
    }

    function updateQuestionContent(index, content) {
        questions[index].content = content;
    }

    function addOption(index) {
        questions[index].options.push("");
        renderQuestions();
    }

    function updateOption(index, optionIndex, value) {
        questions[index].options[optionIndex] = value;
    }

    function setCorrectAnswer(index, optionIndex) {
        questions[index].correctOptionIndex = optionIndex;
    }

    function removeQuestion(index) {
        questions.splice(index, 1);
        renderQuestions();
    }

    function removeOption(questionIndex, optionIndex) {
        if (questions[questionIndex].options.length > 2) {
            questions[questionIndex].options.splice(optionIndex, 1);

            // Update correct answer index if needed
            if (questions[questionIndex].correctOptionIndex === optionIndex) {
                questions[questionIndex].correctOptionIndex = -1;
            } else if (questions[questionIndex].correctOptionIndex > optionIndex) {
                questions[questionIndex].correctOptionIndex--;
            }

            renderQuestions();
        } else {
            alert("A multiple choice question must have at least 2 options");
        }
    }

    function renderQuestions() {
        const container = document.getElementById("questions-container");
        container.innerHTML = "";

        questions.forEach((q, index) => {
            let optionsHtml = "";

            if (q.type === "MultipleChoice") {
                optionsHtml = `
                    <div class="options-container">
                        <label>Options</label>
                        ${q.options.map((opt, optIndex) => `
                            <div class="option-row">
                                <input type="text" class="form-control"
                                    placeholder="Option ${optIndex + 1}"
                                    value="${opt}"
                                    onchange="updateOption(${index}, ${optIndex}, this.value)" />
                                <div class="option-actions">
                                    <label class="radio-container">
                                        <input type="radio" name="correct-${index}"
                                            ${q.correctOptionIndex === optIndex ? "checked" : ""}
                                            onclick="setCorrectAnswer(${index}, ${optIndex})" />
                                        <span class="radio-label">Correct</span>
                                    </label>
                                    <button type="button" class="btn btn-sm btn-danger"
                                        onclick="removeOption(${index}, ${optIndex})">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        `).join("")}
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="addOption(${index})">
                            <i class="fa fa-plus"></i> Add Option
                        </button>
                    </div>
                `;
            } else if (q.type === "TrueFalse") {
                optionsHtml = `
                    <div class="true-false-container">
                        <label>Correct Answer</label>
                        <div class="radio-group">
                            <label class="radio-container">
                                <input type="radio" name="tf-${index}"
                                    ${q.correctOptionIndex === 0 ? "checked" : ""}
                                    onclick="setCorrectAnswer(${index}, 0)" />
                                <span class="radio-label">True</span>
                            </label>
                            <label class="radio-container">
                                <input type="radio" name="tf-${index}"
                                    ${q.correctOptionIndex === 1 ? "checked" : ""}
                                    onclick="setCorrectAnswer(${index}, 1)" />
                                <span class="radio-label">False</span>
                            </label>
                        </div>
                    </div>
                `;
            } else if (q.type === "ShortAnswer") {
                optionsHtml = `
                    <div class="short-answer-container">
                        <label>Correct Answer</label>
                        <input type="text" class="form-control"
                            placeholder="Enter correct answer"
                            value="${q.options[0] || ''}"
                            onchange="updateOption(${index}, 0, this.value)" />
                    </div>
                `;
            }

            container.innerHTML += `
                <div class="question-card">
                    <div class="question-header">
                        <h4>Question ${index + 1}</h4>
                        <button type="button" class="btn btn-danger" onclick="removeQuestion(${index})">
                            <i class="fa fa-trash"></i> Remove
                        </button>
                    </div>

                    <div class="question-body">
                        <div class="form-group">
                            <label>Question Type</label>
                            <select class="form-control" onchange="updateQuestionType(${index}, this.value)">
                                <option value="MultipleChoice" ${q.type === "MultipleChoice" ? "selected" : ""}>Multiple Choice</option>
                                <option value="TrueFalse" ${q.type === "TrueFalse" ? "selected" : ""}>True/False</option>
                                <option value="ShortAnswer" ${q.type === "ShortAnswer" ? "selected" : ""}>Short Answer</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Question Text</label>
                            <textarea class="form-control"
                                placeholder="Enter your question here"
                                onchange="updateQuestionContent(${index}, this.value)">${q.content}</textarea>
                        </div>

                        ${optionsHtml}
                    </div>
                </div>
            `;
        });
    }

    document.getElementById("quizForm").addEventListener("submit", submitQuiz);

    async function submitQuiz(event) {
        event.preventDefault();

        const quizTitle = document.getElementById("quiz-title").value;
        const quizDescription = document.getElementById("quiz-description").value;
        const startTime = document.getElementById("quiz-startTime").value;
        const endTime = document.getElementById("quiz-endTime").value;
        const isTimeLimited = document.getElementById("quiz-isTimeLimited").checked;

        if (!quizTitle) {
            alert("Please enter a quiz title");
            return;
        }

        if (questions.length === 0) {
            alert("Please add at least one question");
            return;
        }

        // Validate questions
        let isValid = true;
        questions.forEach((q, index) => {
            if (!q.content.trim()) {
                alert(`Question ${index + 1} has no content`);
                isValid = false;
            }

            if (q.type === "MultipleChoice" && q.correctOptionIndex === -1) {
                alert(`Please select a correct answer for question ${index + 1}`);
                isValid = false;
            }

            if (q.type === "TrueFalse" && q.correctOptionIndex === -1) {
                alert(`Please select True or False for question ${index + 1}`);
                isValid = false;
            }
        });

        if (!isValid) return;

        try {
            // Code to submit quiz to database would go here
            console.log("Quiz data:", {
                title: quizTitle,
                description: quizDescription,
                startTime,
                endTime,
                isTimeLimited,
                questions
            });

            alert("Quiz saved successfully!");
            // Redirect or reset form
        } catch (error) {
            alert("Error saving quiz: " + error.message);
        }
    }
</script>

<style>
    .quiz-creator-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-section {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 16px;
    }

    textarea.form-control {
        min-height: 80px;
    }

    .form-row {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

        .form-row .form-group {
            flex: 1;
            min-width: 200px;
        }

    .checkbox-group {
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .checkbox-group input {
            margin-right: 5px;
        }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .question-card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .question-header h4 {
            margin: 0;
        }

    .options-container {
        margin-top: 15px;
    }

    .option-row {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        gap: 10px;
    }

        .option-row .form-control {
            flex: 1;
        }

    .option-actions {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .radio-container {
        display: flex;
        align-items: center;
        margin-right: 10px;
    }

    .radio-label {
        margin-left: 5px;
    }

    .btn {
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s;
    }

    .btn-sm {
        padding: 4px 8px;
        font-size: 12px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0069d9;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .btn-outline-primary {
        background-color: transparent;
        border: 1px solid #007bff;
        color: #007bff;
    }

        .btn-outline-primary:hover {
            background-color: #007bff;
            color: white;
        }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .true-false-container,
    .short-answer-container {
        margin-top: 15px;
    }

    .radio-group {
        display: flex;
        gap: 20px;
        margin-top: 5px;
    }
</style>
